////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(x, y, step = 1) {
  let rag = [];
  if (x === y || step <= 0){
    return [];
  }
  while (y >= x){
    rag.push(x);
    x += step;
  }
  return rag;
  }



////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let arr = 0;
for (let i = 0; i < array.length; i++){
  arr += array[i];
}
return arr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
//creating loop decreasing
let arr = [];
for (let i = array.length - 1; i >= 0; i--){
arr.push(array[i]);
}
return arr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  //creating loop decreasing
array.reverse();
  }
////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
let rest = null;
//iterate backwards
for( let i = array.length - 1; i >=0; i--){
  rest = {value: array[i], rest: rest};
}
return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, output = []){
  if (list.rest === null){
   output.push(list.value);
    return output;
  }
    output.push(list.value);
    return listToArray(list.rest, output);
  }
////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
var prep = {
  value: element,
  rest: list
};
return prep;
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, value) {
//base
if (value === 0){
  return list.value;
}
if (value < 0){
  return undefined;
}
//recursion
list = list.rest; 
return nth(list, value - 1)
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y){
//deterime if x and y are not objects
if (typeof x !== 'object' && typeof y !== 'object'){
  return x === y;
}
if (typeof x !== 'object' || typeof y !== 'object'){
  return false;
}
//both items are objects
//determine if objects are same length
let xKeys = Object.keys(x);
let yKeys = Object.keys(y);
if (xKeys.length !== yKeys.length){
  return false;
}
for (let i = 0; i < xKeys.length; i++){
  if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){
    return false;
  }
}
return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
